#股票预测
#特征:长期特征+短期特征+重大事件特征(政策X,经济环境,时间(周一到周五,农历月,季节,天气?,地点?)等)+舆论
#模型:MLP or LSTM or xgboost
#给定历史数据预测下一天结果:上升,保持,下降;细化,给出概率,或更具体,给出具体升降的幅度如+2,0,-3等。
#模型分成两个思路,同性质数据作回归,不同性质数据作分类
#对于舆论数据,时间对齐,有论文说取预测天3天之前的评论效果比较好,待验证,文本评论数据这块由于缺少特定领域标注语料,并没有进一步尝试

#data文件夹数据说明:
#cvmodel下的sort_results.csv为交叉验证得到的股票排序结果, stock_dict为现有持股情况(可不用)
#models存储的是以约最近141天作为测试,之前数据作训练得到的模型
#stock_data存储所有股票的日线和30日线数据
#total_model存储的是以所有数据训练得到的各支股票模型
#total_model副本存储的则是模型备份,少的是以交叉验证筛选得到的,多的是以models测试集表现排序,即data下的sort_results.csv得到的
#在重新训练MLP_clf.py或MLP_policy.py时,模型不会自动覆盖,嫌麻烦可以先把total_model里的模型备份出来再删除,再运行MLP_clf.py或MLP_policy.py

#lstm_test.py
#lstm用于回归预测,所以提取特征都是同性质的, 评估标准自己手写, 即实际预测对的次数除以总次数。

#MLP_regression.py
#MLP用于回归预测

#MLP_clf.py
#MLP用于分类预测,所以特征提取可以加入不同性质数据,如时间,经济等。评估标准为keras自带acc
#测试数据分割出多少来在该文件中修改,找到create_Xt_Yt(X_clf, y_clf, 0.9),修改0.9为你想要的比例即可

#MLP_policy3.py
#根据交叉训练结果得到sort_results文件。
#测试数据分割出多少来在该文件中修改,找到create_Xt_Yt(X_clf, y_clf, 0.9),修改0.9为你想要的比例即可

#xgboost_test.py
#xgboost用于回归预测,评估标准手写。

#modelB.py
#对MLP采用不同特征的一些尝试。只用close_price; 以及1日线和30日线; 以及所有项(如600300.csv下的所有列)都加进去

#policy.py
#对于每只股票模拟完一个月交易后模拟下支股票,由于实际是对每一天模拟全部股票再模拟下一天,因此此文件不符合实际操作流程,弃用。

#policy2.py
#对于每一天模拟前N支股票交易,持续一个月

#policy3.py
#预测第二天对前N支股票的交易决策

#policy4.py
#每天训练一次,模拟10天

#trade_simulation
#加入easy_trade模拟实际操盘


#如果money 增加，相应的一次购买限制也要增加，大于10w的需要同步增加，最好从大于8w开始增加一次购买限制，默认是10000